using System.Linq.Expressions;
using RayTracer.General;

namespace RayTracer.Instructions;

/// <summary>
/// This class represents the work of setting a property to a value that is generated by
/// another instruction set.
/// </summary>
public class SetPropertyFromInstruction<TObject, TValue>
    : AffectObjectPropertyInstruction<TObject, TValue>
    where TObject : class
    where TValue : class, new()
{
    private readonly ObjectInstructionSet<TValue> _instructionSet;

    private SetPropertyFromInstruction(
        Expression<Func<TObject, TValue>> propertyLambda,
        ObjectInstructionSet<TValue> instructionSet) : base(propertyLambda)
    {
        _instructionSet = instructionSet;
    }

    /// <summary>
    /// This method is used to execute the instruction to set a string property.
    /// </summary>
    /// <param name="context">The current render context.</param>
    /// <param name="variables">The current set of scoped variables.</param>
    public override void Execute(RenderContext context, Variables variables)
    {
        _instructionSet.Execute(context, variables);

        Setter.Invoke(Target, [_instructionSet.CreatedObject]);
    }
}
